// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: CTTFileMan.proto

#include "CTTFileMan.pb.h"
#include "CTTFileMan.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace eleWallet {

static const char* Operation_method_names[] = {
  "/eleWallet.Operation/DoRPCOperation",
  "/eleWallet.Operation/SendRate",
};

std::unique_ptr< Operation::Stub> Operation::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Operation::Stub> stub(new Operation::Stub(channel));
  return stub;
}

Operation::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_DoRPCOperation_(Operation_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendRate_(Operation_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Operation::Stub::DoRPCOperation(::grpc::ClientContext* context, const ::eleWallet::OpRequest& request, ::eleWallet::OpReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DoRPCOperation_, context, request, response);
}

void Operation::Stub::experimental_async::DoRPCOperation(::grpc::ClientContext* context, const ::eleWallet::OpRequest* request, ::eleWallet::OpReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DoRPCOperation_, context, request, response, std::move(f));
}

void Operation::Stub::experimental_async::DoRPCOperation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::eleWallet::OpReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DoRPCOperation_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::eleWallet::OpReply>* Operation::Stub::AsyncDoRPCOperationRaw(::grpc::ClientContext* context, const ::eleWallet::OpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::eleWallet::OpReply>::Create(channel_.get(), cq, rpcmethod_DoRPCOperation_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::eleWallet::OpReply>* Operation::Stub::PrepareAsyncDoRPCOperationRaw(::grpc::ClientContext* context, const ::eleWallet::OpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::eleWallet::OpReply>::Create(channel_.get(), cq, rpcmethod_DoRPCOperation_, context, request, false);
}

::grpc::Status Operation::Stub::SendRate(::grpc::ClientContext* context, const ::eleWallet::OpRate& request, ::eleWallet::OpReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendRate_, context, request, response);
}

void Operation::Stub::experimental_async::SendRate(::grpc::ClientContext* context, const ::eleWallet::OpRate* request, ::eleWallet::OpReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendRate_, context, request, response, std::move(f));
}

void Operation::Stub::experimental_async::SendRate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::eleWallet::OpReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendRate_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::eleWallet::OpReply>* Operation::Stub::AsyncSendRateRaw(::grpc::ClientContext* context, const ::eleWallet::OpRate& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::eleWallet::OpReply>::Create(channel_.get(), cq, rpcmethod_SendRate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::eleWallet::OpReply>* Operation::Stub::PrepareAsyncSendRateRaw(::grpc::ClientContext* context, const ::eleWallet::OpRate& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::eleWallet::OpReply>::Create(channel_.get(), cq, rpcmethod_SendRate_, context, request, false);
}

Operation::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Operation_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Operation::Service, ::eleWallet::OpRequest, ::eleWallet::OpReply>(
          std::mem_fn(&Operation::Service::DoRPCOperation), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Operation_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Operation::Service, ::eleWallet::OpRate, ::eleWallet::OpReply>(
          std::mem_fn(&Operation::Service::SendRate), this)));
}

Operation::Service::~Service() {
}

::grpc::Status Operation::Service::DoRPCOperation(::grpc::ServerContext* context, const ::eleWallet::OpRequest* request, ::eleWallet::OpReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Operation::Service::SendRate(::grpc::ServerContext* context, const ::eleWallet::OpRate* request, ::eleWallet::OpReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace eleWallet

